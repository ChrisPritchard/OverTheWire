open System
open System.Net
open System.Web

let url = "http://natas28.natas.labs.overthewire.org/"
let credentials = "natas28:JWwR438wkgTsNKBbcJoowyysdM82YjeF"
let basicAuth = "Authorization: Basic " + Convert.ToBase64String (Seq.toArray (Seq.map byte credentials)) 

let hex (bytes: seq<byte>) =
    bytes
    |> Seq.map (fun b -> Convert.ToString(b, 16).PadLeft(2, '0'))
    |> String.concat ""

let b64tohex s =
    Convert.FromBase64String(s) |> hex

let hexFor query =
    let url = sprintf "%s?query=%s" url query
    let http = HttpWebRequest.CreateHttp url
    http.Headers.Add(basicAuth)
    http.Method <- "HEAD"
    http.AllowAutoRedirect <- false

    let response =
        try
            http.GetResponse ()
        with | :? WebException as webEx ->
            webEx.Response
    let newUrl = response.Headers.["Location"]
    let query = HttpUtility.UrlDecode(newUrl.Substring(newUrl.IndexOf("query=") + 6))
    b64tohex query

let blockSize = 
    let baseSize = hexFor ""
    let atSize8 = hexFor "AAAAAAAA"
    if atSize8.Length > baseSize.Length then 8
    else
        let atSize16 = hexFor "AAAAAAAAAAAAAAAA"
        if atSize16.Length > baseSize.Length then 16
        else failwith "something is wrong"

let chunked (hex: string) =
    Seq.chunkBySize (blockSize * 2) hex
    |> Seq.map (fun ca -> String(ca))
    |> Seq.toArray

let fullSize = 
    [16..48] 
    |> List.find (fun n ->
        let query = String.replicate n "A"
        let chunks = hexFor query |> chunked
        Set.count (Set.ofArray chunks) <> chunks.Length)
